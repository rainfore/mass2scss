@import 'helper.scss';



/**
 * base css3 vendor prefixr
 * http://peter.sh/experiments/vendor-prefixed-css-property-overview/
 * â“˜
 */

@mixin transition-delay($value...) {-webkit-transition-delay: $value;-moz-transition-delay: $value;transition-delay: $value;}
@mixin transition-duration($value...) {-webkit-transition-duration: $value;-moz-transition-duration: $value;transition-duration: $value;}
@mixin transition-timing-function($value...) {-webkit-transition-timing-function: $value;-moz-transition-timing-function: $value;transition-timing-function: $value;}
@mixin animation($value...) {-webkit-animation: $value;-moz-animation: $value;animation: $value;}
@mixin animation-delay($value...) {-webkit-animation-delay: $value;-moz-animation-delay: $value;animation-delay: $value;}
@mixin animation-name($value...) {-webkit-animation-name: $value;-moz-animation-name: $value;animation-name: $value;}
@mixin animation-direction($value...) {-webkit-animation-direction: $value;-moz-animation-direction: $value;animation-direction: $value;}
@mixin animation-duration($value...) {-webkit-animation-duration: $value;-moz-animation-duration: $value;animation-duration: $value;}
@mixin animation-fill-mode($value...) {-webkit-animation-fill-mode: $value;-moz-animation-fill-mode: $value;animation-fill-mode: $value;}
@mixin animation-iteration-count($value...) {-webkit-animation-iteration-count: $value;-moz-animation-iteration-count: $value;animation-iteration-count: $value;}
@mixin animation-timing-function($value...) {-webkit-animation-timing-function: $value;-moz-animation-timing-function: $value;animation-timing-function: $value;}
@mixin columns($value...) {-webkit-columns: $value;-moz-columns: $value;columns: $value;}
@mixin column-count($value...) {-webkit-column-count: $value;-moz-column-count: $value;column-count: $value;}
@mixin column-gap($value...) {-webkit-column-gap: $value;-moz-column-gap: $value;column-gap: $value;}
@mixin column-fill($value...) {-webkit-column-fill: $value;-moz-column-fill: $value;column-fill: $value;}
@mixin column-rule($value...) {-webkit-column-rule: $value;-moz-column-rule: $value;column-rule: $value;}
@mixin column-rule-color($value...) {-webkit-column-rule-color: $value;-moz-column-rule-color: $value;column-rule-color: $value;}
@mixin column-rule-style($value...) {-webkit-column-rule-style: $value;-moz-column-rule-style: $value;column-rule-style: $value;}
@mixin column-rule-width($value...) {-webkit-column-rule-width: $value;-moz-column-rule-width: $value;column-rule-width: $value;}
@mixin column-span($value...) {-webkit-column-span: $value;-moz-column-span: $value;column-span: $value;}
@mixin column-width($value...) {-webkit-column-width: $value;-moz-column-width: $value;column-width: $value;}
@mixin box-orient($value...) {-webkit-box-orient: $value;-moz-box-orient: $value;box-orient: $value;}
@mixin box-sizing($value...) {-webkit-box-sizing: $value;-moz-box-sizing: $value;box-sizing: $value;}
@mixin box-pack($value...) {-webkit-box-pack: $value;-moz-box-pack: $value;box-pack: $value;}
@mixin box-align($value...) {-webkit-box-align: $value;-moz-box-align: $value;box-align: $value;}
@mixin box-direction($value...) {-webkit-box-direction: $value;-moz-box-direction: $value;box-direction: $value;}
@mixin box-lines($value...) {-webkit-box-lines: $value;-moz-box-lines: $value;box-lines: $value;}
@mixin box-ordinal-group($value...) {-webkit-box-ordinal-group: $value;-moz-box-ordinal-group: $value;box-ordinal-group: $value;}
@mixin box-flex($value...) {-webkit-box-flex: $value;-moz-box-flex: $value;box-flex: $value;}
@mixin box-flex-group($value...) {-webkit-box-flex-group: $value;-moz-box-flex-group: $value;box-flex-group: $value;}
@mixin box-shadow($value...) {-webkit-box-shadow: $value;-moz-box-shadow: $value;box-shadow: $value;}
@mixin transform($value...) {-webkit-transform: $value;-moz-transform: $value;-ms-transform: $value;-o-transform: $value;transform: $value;}
@mixin transform-origin($value...) {-webkit-transform-origin: $value;-moz-transform-origin: $value;-ms-transform-origin: $value;-o-transform-origin: $value;transform-origin: $value;}
@mixin transform-style($value...) {-webkit-transform-style: $value;-moz-transform-style: $value;-ms-transform-style: $value;-o-transform-style: $value;transform-style: $value;}
@mixin perspective($value...) {-webkit-perspective: $value;-moz-perspective: $value;perspective: $value;}
@mixin perspective-origin($value...) {-webkit-perspective-origin: $value;-moz-perspective-origin: $value;perspective-origin: $value;}
@mixin appearance($value...) {-webkit-appearance: $value;-moz-appearance: $value;-ms-appearance: $value;-o-appearance: $value;appearance: $value;}
@mixin backface-visibility($value...) {-webkit-backface-visibility: $value;-moz-backface-visibility: $value;backface-visibility: $value;}
@mixin background-clip($value...) {-webkit-background-clip: $value;background-clip: $value;}
@mixin background-origin($value...) {-webkit-background-origin: $value;background-origin: $value;}
@mixin background-size($value...) {-webkit-background-size: $value;background-size: $value;}
@mixin border-box($value...) {-webkit-border-box: $value;-moz-border-box: $value;border-box: $value;}
@mixin box-shadow($value...) {-webkit-box-shadow: $value;box-shadow: $value;}
@mixin user-select($value...) {-webkit-user-select: $value;-moz-user-select: $value;-ms-user-select: $value;user-select: $value;}
@mixin hyphens($value...) {-epub-hyphens: $value;-moz-hyphens: $value;-ms-hyphens: $value;hyphens: $value;}
@mixin filter($value...) {-moz-filter: $value;-webkit-filter: $value;filter: $value;}


@each $vendors, $property in $prefix-properties {
    define('$'+$property, @include prefixr($property, null, $vendors));
}
// __example__ :content-box;
// body{
//     @include border-box(content-box);
// }


//
@mixin border-radius($radius, $direction){
  @if $direction{
      // top
      @if type-of($direction) == 'text'{
        $direction: @include side2corner($direction);
      }@else{ // top left
        $direction: join($direction);
      }
      @for $direct of $direction{
        @include prefixr(border-#{$direct}-radius, $radius, moz)
      }
  }@else{
    @include prefixr(border-radius, $radius ,moz);
  }
    
}
// __example__ :
// ```
// .radius{
//   @include border-radius(3px);
// }
// .radius-corner{
//   @include border-radius(3px, top left);
// }
// .radius-side{
//   @include border-radius(3px, top);
// }
// ```

@mixin transition(){
  -webkit-transition: @include transition-prop-prefix($arguments, -webkit-);
  -moz-transition: @include transition-prop-prefix($arguments, -moz-);
  transition: $arguments;
}

@mixin transition-property(){
  -webkit-transition-property: @include transition-prop-prefix($arguments, -webkit-);
  -moz-transition-property: @include transition-prop-prefix($arguments, -moz-);
  transition-property: $arguments;
}

// __example__ :
// ```
// body{
//     @include transition(transform .1s);
//     @include transition-property(transform, pespective, all);
// }




//warning: the block 's context ,if passed a func
@mixin hidpi($block, $ratio: 1.5) {
    @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
        only screen and (min--moz-device-pixel-ratio: $ratio),
        only screen and (-o-min-device-pixel-ratio: ($ratio/1)),
        only screen and (min-resolution: round($ratio*96) + dpi),
        only screen and (min-resolution: $ratio + dppx) {
            @include block();
    }
}

// __example__:
// ```css
// @include hidpi({
//     body{
//         left: 10px;
//     }
//     p{
//         right: 20px;
//     }
// }, 2.0)
// ```



// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/css3/_image-rendering.scss
@mixin image-rendering($mode: optimizeQuality){
    @if $mode != optimize-contrast{
        image-rendering: $mode;
    }@else{
        image-rendering: -moz-crisp-edges;
        image-rendering: -o-crisp-edges;
        image-rendering: -webkit-optimize-contrast;
        image-rendering: optimize-contrast;
    }
}





@mixin keyframes($name, $block){
    @-webkit-keyframes $name{
        @include block(-webkit-);
    } 
    @-moz-keyframes $name{
        @include block(-moz-);
    } 
    @-o-keyframes $name{
        @include block(-o-);
    } 
    @keyframes $name{
        @include block('');
    } 
}
// __examlpe__
// @keyframes hello {
//     20%{
//         left: 20px;
//     }
//     to{
//         left: 40px;
//     }
// }



// placeholder
@mixin placeholder($block){
    &::#{-webkit-input-placeholder, -moz-placeholder, -ms-placeholder, placeholder} {
       @include block() 
    }
    &:#{-ms-placeholder} {
       @include block()
    }
}
// __Example__
// #input1{
//   &::-webkit-input-placeholder {
//     color:#090; 
//     background:#fff; 
//     text-transform:uppercase;
//   } &::-moz-placeholder {
//     color:#090; 
//     background:#fff; 
//     text-transform:uppercase;
//   } &:-moz-placeholder {
//     color:#090; 
//     background:#fff; 
//     text-transform:uppercase;
//   } &:-ms-placeholder {
//     color:#090; 
//     background:#fff; 
//     text-transform:uppercase;
//   }
// }


@mixin linear-gradient($pos, $color-stops...){
  $type-pos: type-of($pos);
  $deg: null;
  // @debug nth($pos, 0 + 1);
  @if $type-pos == 'color' || ($type-pos == 'values' && type-of(nth($pos, 0)) == 'color'  + 1){
    push($color-stops, $pos);
    $pos: null;
  }
  @if $type-pos == 'dimension' {
      $deg: $pos;
  }@else {
      $pos: @include linear-pos($pos);
  }
  $start: @include get-stop-color(nth($color-stops, 0) + 1);
  $end: @include get-stop-color(nth($color-stops, len($color-stops) - 1) + 1);
  $fallback: mix($start, $end);

  $specs: $color-stops;
  $other: slice($color-stops);
  $gradient-type: null;
  $revert: false;
  @if $deg != null {
     unshift($specs, $deg);
     unshift($other, $deg);
  }@elseif($pos != null){
     unshift($specs, to @include opposite($pos));
     unshift($other, $pos);
     @if $pos == right || $pos == bottom{
      $revert: true;
     }
     @if $pos == left || $pos == right {
        $gradient-type: 1;

     }@elseif $pos == top || $pos == bottom{
        $gradient-type: 0;
     }
  }@else{ // default top -> bottom
     $gradient-type: 0;
     $revert: true;
  }
  background-color: $fallback; //fallback
  background-image: -webkit-linear-gradient($other); // chrome 2+ safari 4+
  background-image: -moz-linear-gradient($other); // ff
  background-image: -ms-linear-gradient($other); //ie10
  background-image: -o-linear-gradient($other); //opeator
  background-image: linear-gradient($specs); //spec
  // @REMOVE hack for lt ie9 
  @if $gradient-type != null{
    @if $revert {
      $-start: argb($end);
      $-end: argb($start);
    }@else{
      $-end: argb($end);
      $-start: argb($start);
    }
    filter: t("progid:DXImageTransform.Microsoft.gradient(startColorstr='%s', endColorstr='%s', GradientType=%s)" % ($-start, $-end, $gradient-type)) \9;
  }
}

// __Example__:
// body{
//   @include linear-gradient(top , #ccc, #ddd 50%);
//   @include linear-gradient(bottom , #ccc, #ddd 50%);
//   @include linear-gradient(left , #ccc, #ddd 50%);
//   @include linear-gradient(right , #ccc, #ddd 50%);
//   @include linear-gradient(#ccc, #ddd 50%);
//   @include linear-gradient(30deg ,#ccc, #ddd 50%);
// }



@mixin radial-gradient($color-stops...) {
    $start: @include get-stop-color(nth($color-stops, 0) + 1);
    $end: @include get-stop-color(nth($color-stops, len($color-stops) - 1) + 1);
    $fallback: mix($start, $end);
    unshift($color-stops, ellipse);
    background-color: $fallback;
    background-image: -webkit-radial-gradient($color-stops);
    background-image: -moz-radial-gradient($color-stops);
    background-image: -ms-radial-gradient($color-stops);
    background-image: -o-radial-gradient($color-stops);
    background-image: radial-gradient($color-stops);
    background-repeat: no-repeat;
}

// close ie hack support
@mixin ie-reset-gradient{
  filter: t("progid:DXImageTransform.Microsoft.gradient(enabled = false)");
}




